{"Typealiases/ContextValue.html":{"name":"ContextValue","abstract":"<p>Type of values which are allowed to be set in the context</p>"},"Typealiases/Context.html":{"name":"Context","abstract":"<p>A context holds a list of named values</p>"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO17expressionIsEmptyyA2CmF":{"name":"expressionIsEmpty","abstract":"<p>The given expression is empty</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO30infixMissingSecondaryParameteryA2CmF":{"name":"infixMissingSecondaryParameter","abstract":"<p>A infix operator needs to be in the form of <code>a ?? b</code>, but the second parameter was not given</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO13typesMismatchyA2CmF":{"name":"typesMismatch","abstract":"<p>The type of two nodes differ</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO15typesNotLogicalyA2CmF":{"name":"typesNotLogical","abstract":"<p>A logical type, such as <code>true</code> or <code>false</code> is expected</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO18typesNotComparableyA2CmF":{"name":"typesNotComparable","abstract":"<p>Two types are not comparable</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO19missingClosingQuoteyA2CmF":{"name":"missingClosingQuote","abstract":"<p>A string in the expression is not closed</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO15unknownVariableyACSS_tcACmF":{"name":"unknownVariable(name:)","abstract":"<p>A requested variable with the given <code>name</code> could not be found in the <code>context</code></p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO19invalidVariableTypeyACypcACmF":{"name":"invalidVariableType(_:)","abstract":"<p>Type of a value is not supported by the rfamework</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO7invalidyACSS_tcACmF":{"name":"invalid(token:)","abstract":"<p>Found an invalid token inside the expression</p>","parent_name":"PhraseError"},"Enums/PhraseError.html#/s:6Phrase0A5ErrorO15unknownOperatoryACSS_tcACmF":{"name":"unknownOperator(name:)","abstract":"<p>A unknown operator was found in the expression</p>","parent_name":"PhraseError"},"Enums/PhraseError.html":{"name":"PhraseError","abstract":"<p>Errors which can be thrown during framework usage</p>"},"Classes/Phrase.html#/s:6PhraseAAC7contextSDySSs11AnyHashableVGvp":{"name":"context","abstract":"<p>Evaluation context, holding values for variable names</p>","parent_name":"Phrase"},"Classes/Phrase.html#/s:6PhraseAACyABSSKcfc":{"name":"init(_:)","abstract":"<p>Create a new instance of Phrase based on the given expression.</p>","parent_name":"Phrase"},"Classes/Phrase.html#/s:6PhraseAAC8evaluateSbyKF":{"name":"evaluate()","abstract":"<p>Evaluates the Abstract Syntax Tree (AST) of this expression, using the current context.</p>","parent_name":"Phrase"},"Classes/Phrase.html#/s:6PhraseAAC2eeoiySbAB_ABtFZ":{"name":"==(_:_:)","abstract":"<p>Checks if two instances of <code>Phrase</code> equal.</p>","parent_name":"Phrase"},"Classes/Phrase.html":{"name":"Phrase","abstract":"<p>Parse and evaluate a boolean expression.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}